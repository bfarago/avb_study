#pragma once
#include "std_types.h"

#pragma pack(push,1)

typedef enum {
	ACMP_MSGTYPE_CONNECT_TX_COMMAND = 0,
	ACMP_MSGTYPE_CONNECT_TX_RESPONSE = 1,
	ACMP_MSGTYPE_DISCONNECT_TX_COMMAND = 2,
	ACMP_MSGTYPE_DISCONNECT_TX_RESPONSE = 3,
	ACMP_MSGTYPE_GET_TX_STATE_COMMAND = 4,
	ACMP_MSGTYPE_GET_TX_STATE_RESPONSE = 5,
	ACMP_MSGTYPE_CONNECT_RX_COMMAND = 6,
	ACMP_MSGTYPE_CONNECT_RX_RESPONSE = 7,
	ACMP_MSGTYPE_DISCONNECT_RX_COMMAND = 8,
	ACMP_MSGTYPE_DISCONNECT_RX_RESPONSE = 9,
	ACMP_MSGTYPE_GET_RX_STATE_COMMAND = 10,
	ACMP_MSGTYPE_GET_RX_STATE_RESPONSE = 11,
} acmp_msgtype_en;

//Acmp data unit
typedef struct {
	UINT64 ControllerEntityId;
	UINT64 TalkerEntityId;
	UINT64 ListenerEntityId;
	UINT32 ListenerUniqueId : 16;
	UINT32 TalkerUniqueId : 16;
	UINT32 StreamDestMAC1;
	UINT32 ConnectionCount : 16;
	UINT32 StreamDestMAC2 : 16;
	UINT32 Flags : 16;
	UINT32 SequenceId : 16;
	UINT32 Reserved : 16;
	UINT32 StremVlanId : 16;
} acmp_data_s;

typedef enum {
	AECMP_MSGTYPE_CONNECT_TX_COMMAND = 0,
	ACMP_MSGTYPE_CONNECT_TX_RESPONSE = 1,
	ACMP_MSGTYPE_DISCONNECT_TX_COMMAND = 2,
	ACMP_MSGTYPE_DISCONNECT_TX_RESPONSE = 3,
	ACMP_MSGTYPE_GET_TX_STATE_COMMAND = 4,
	ACMP_MSGTYPE_GET_TX_STATE_RESPONSE = 5,
	ACMP_MSGTYPE_CONNECT_RX_COMMAND = 6,
	ACMP_MSGTYPE_CONNECT_RX_RESPONSE = 7,
	ACMP_MSGTYPE_DISCONNECT_RX_COMMAND = 8,
	ACMP_MSGTYPE_DISCONNECT_RX_RESPONSE = 9,
	ACMP_MSGTYPE_GET_RX_STATE_COMMAND = 10,
	ACMP_MSGTYPE_GET_RX_STATE_RESPONSE = 11,
} acmp_msgtype_en;

#pragma pack(pop)
